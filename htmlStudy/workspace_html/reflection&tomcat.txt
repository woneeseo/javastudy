< Reflection - 문자열로 객체 만들기 >

- 일반적으로 객체를 만드는 방법에는

1. 자료형 변수명 = 자료형에 맞는 값;
2. 자료형 변수명 = new 생성자( );

두가지가 보편적이나,

+ 문자열을 이용해 객체를 만드는 방법 : reflection 을 사용할 수도 있다.
(Spring Framework, JSPsuvlet에서 객체를 만드는 방법)
: DB와 map과 Reflection을 잘 활용하면 코드의 유지보수가 획기적으로 쉬워진다.

 * reflection을 만드는 방법 *

1. menu에 대한 테이블을 만듦.
2. 해당 테이블에 menu를 full package명으로 저장
3. menu에 대한 DTO클래스를 만듦
4. menu에 대한 DAO클래스를 만듦
5. main( )에서 menu목록을 전부 가져옴 (for)
6. 그 메뉴들을 모두 map에 저장함
7. reflection을 이용해서 특정 메뉴에 대한 객체를 생성
8. 그 객체가 갖고있는 execute( ) 호출


// reflection 구현하기//
// 1. 먼저 DB테이블에 클래스의 풀 패키지명을 값으로 갖는 테이블을 하나 만든다.
		
// CREATE TABLE menus(
// fullname VARCHAR2(100) PRIMARY KEY
// )
		
// 2. 테이블에 값을 추가한다.
// INSERT INTO menus VALUES ('com.naver.InsertCommand')
// INSERT INTO menus VALUES ('com.naver.SelectCommand')
// INSERT INTO menus VALUES ('com.naver.UpdateCommand')
// INSERT INTO menus VALUES ('com.naver.DeleteCommand')
// INSERT INTO menus VALUES ('com.naver.EndCommand')
		
// 3. DAO/DTO 클래스를 만든다.
		
// 4. main()에서 menu테이블이 갖고있는 값을 map에 하나씩 추가해준다.
		
Map<Integer, String> menus = new HashMap<Integer, String>();
		
MenuDAO dao = new MenuDAO();
List<String> list = dao.select();
		
for(int i =0; i<list.size(); i++) {
	menus.put(i, list.get(i));
}
				
Scanner sc = new Scanner(System.in);
		
while (true) {
			
	System.out.println("메뉴를 선택하세요.");
			
// 5. map에 추가해 준 값을 반복문을 통해 가지고온다.
			
	StringBuffer sb = new StringBuffer();
	// StringBuffer는 문자열을 이어서 출력할 수 있게 함
	// String str = i+": "+com2+", "; 와 같지만
	// 저장용량을 덜 차지하는 장점이 있다.
			
	for(int i=0; i<list.size(); i++) {
		String fullname = list.get(i);
		// 리스트에서 가져온 값(풀패키지명을 적은 문자열)을 str로 지정해서
		// forname의 파라미터 값으로 넣어서 class객체를 만든다.
		Class<?> testClass2 = Class.forName(fullname);
		// 만들어진 클래스 객체를 이용해서 생성자를 만들어내고
		Constructor<?> cons2 = testClass2.getConstructor();
		// 이 생성자를 통해서 객체를 만들어낸다. 
		Command com2 = (Command) cons2.newInstance();
				
		sb.append(i);
		sb.append(": ");
		sb.append(com2.toString());
		sb.append(", ");
				
		// 반복문을 통해서 메뉴를 출력할 수 있고
				
	}
			
	System.out.print(sb.toString());
	System.out.println();
	int idx = sc.nextInt();
	sc.nextLine();
			
	String str = menus.get(idx);
	// 메뉴의 idx번 인덱스가 가지고 있는 풀패키지명을 가져와라.
	// (idx는 콘솔에서 입력하는 값임)
		
	Class<?> testClass = Class.forName(str);
	Constructor<?> cons = testClass.getConstructor();
	Command com = (Command) cons.newInstance();
	// 메뉴를 출력하는 것과 동일한 방법으로 reflection한 뒤
	// 생성된 객체를 이용해서 execute()에 접근할 수 있다.
			
	com.execute(sc);
	(콘솔에서 입력받은 idx번 인덱스를 가진 풀패키지명에 접근해,
	그 패키지가 가지고 있는 execute( )를 기능하게 함)
			
	// reflection의 장점은 
	// 기존에 배웠던 방법에서는 클래스가 추가되면 무조건
	// 메인을 수정해야 했다 (배열에 추가하거나, 자바 컬렉션 프레임워크에 add함)
	// 하지만 reflection으로 객체를 설정해주고
	// 테이블에 value 추가 + 클래스 추가 만 해도 
	// 메인을 손 댈 필요 없이 기능 추가 및 삭제가 가능해진다.
	// 유지보수가 매우매우매우 편리함!


==> JSP Suvlet 게시판 프로젝트 할 때 사용할 것임**
(다중 if문으로 구현한 코드를 reflection을 이용해 바꿔야 함)






톰캣 (컨테이너이자 서버로 사용)
톰캣 7 버전을 다운받으면 됨

localhost:8089 > 톰캣 다운로드 성공했다~ 화면 나오면 ok
포트 번호 80 -> 포트번호를 적지 않아도 로컬호스트로 접근 가능

포트번호로 사용할 수 있는 범위 : 0~65534 
실제로는 0~1023까지는 시스템포트 - 사용불가
1024~65534 사이의 포트번호를 사용해야 한다.

8080은 오라클에서 사용하는 포트번호이기 때문에 8080 제외하고는 
80으로 시작하는 번호 무엇을 사용하든 ok

톰캣과 이클립스를 동시에 실행하면 포트에서 충돌이 일어남
이클립스로 작업을 시작할 때는 톰캣이 꺼져있는 상태로 작업을 해야 함




<html>


- html은 정적인 프로그래밍이다.
  (동적인 프로그래밍은 jsp/suvlet이나 javascript를 이용한다)
- 개발자들은 html에서 mark up 작업 (기본 구조를 만들어 주는 작업)을 주로 한다


web.xml : 환경설정파일 / 배포서술자 / Deployment Decreiptor / DD 

웹 프로그래밍은 메인메서드가 없음.
실행할 때는 Run on surver를 선택한다. (지정해 준 로컬호스트 서버에서 결과 확인 가능)
window -> wep browser -> chrome 을 선택해서 출력하기
(요즘은 웹 브라우저 기본값으로chrome을 사용하기 때문에)

css로 미디어파일 배치 (인테리어)
tag 기본 구조를 생성 
java Script 
JSP 화면구현
suvlet 컨트롤러 구현
DB작업은 class로


c# 은 ASP
C나 C++ 은 PHP


1. eclipse의 workspace를 변경 (workspace_html) -> EE버전인지 확인할 것
2. tomcat 설치 (8089 포트 사용함, ezen/ezen)
3. 이클립스에서 servers 폴더에 서버 생성
4. 다이나믹 웹 프로젝트 메뉴를 통해 프로젝트 생성
5. WepContent 폴더에 a.html 파일 생성
6. <!DOCTYPE html> = html5 문서임을 알려주는 태그
7. <html> </html> = html문서의 시작과 끝을 알려주는 태그
8. <head> </head> = 문서의 설정과 관련된 정보를 가지고 있는 태그
9. <body> </body> = 브라우저에 출력해서 클라이언트에게 보여주는 내용을 담고있는 태그
10. <a> </a> = 링크나 북마크를 걸 수 있는 태그 
		ex)<a href="https://www.naver.com">naver</a>
	        		( href를 이용해서 url주소를 넣어주면 됨)
		ex)<a href="#z">북마크 기능</a>
			(#은 id를 나타낸다. id값이 z라는 곳을 북마크 했다는 의미)
			(id를 중복으로 사용해서는 안된다 - 선언은 되지만 사용해선 안됨)
11. <br> = 줄바꿈
12. <p> </p> = 문단 태그  (<br>을 쓸 필요 없이 앞 뒷 문단에서 자동으로 줄바꿈 됨)
	         문장이 여러개를 이루어 문단을 이룰 때 사용함 
	         <p> 태그 내부에는 주로 텍스트를 넣어주며 내부에 다른 태그를 입력해서 사용하지 않는다.
	         (cf <span> / <i> 등의 특정 텍스트에 효과를 부여하기 위한 태그는 <p>내부에서 사용되기도 함)

13. <div> </div> = 단락 태그 (<br>을 쓸 필요 없이 앞 뒷 문단에서 자동으로 줄바꿈 됨)
		<div>는 주로 태그를 넣어서 사용하기 위해 씀 (<p>와의 차이점)
		일종의 컨테이너 역할을 한다. <div>내부에 쓰여진 태그들은 한 덩어리를 이루게 됨
		but, <div>는 내부에 어떤 내용이 들어있는지 알 수 없다

	13-1. section : <div>의 내부에 어떤 내용이 들어있는지 알 수 없는 것을 보완해 사용
		      내부에 <article>등의 태그를 넣어 사용할 수 있으며, 
		      태그들을 통해 이 섹션이 어떤 내용을 담고있는 섹션인지를 확인할 수 있다
			( => 시맨틱 태그의 한 종류임 )

14. <input> = 입력창을 만들 수 있는 태그

	input 태그의 placeholder : 입력창에 메세지를 남겨둘 수 있음.
			        입력커서가 들어가면 메세지가 사라짐.

	input 태그는 form태그에 감싸져있어야만 효용성이 있다.
	
	<form action="b.html">
		<input name="id" placeholder="ID를 입력하세요.">
		<input type="submit" value="로그인">
	</form>
	=> input의 타입값을 submit으로 주면, 버튼 역할을 한다.
	=> 로그인 버튼을 누르면 어디로 갈 것인가? -> form태그의 action에 주소값을 준다.
	=> 정보를 잘 넘겨받으면 주소값+쿼리스트림이 생성된다
	
	http://localhost:8089/HelloWorld/b.html?id=teacheryo&pw=123456
	쿼리스트림은 띄어쓰기 하면 안됨
	파일명다음 ? 로 파라미터를 집어넣고, 파라미터가 여러개일 경우(id/pw) & 로 연결
	파라미터네임(id,pw)/파라미터 밸류(teacheryo, 123456) 는 =을이용해서 연결되어 있음

15. <h1></h1> = 헤더태그/ 제목이나 소제목등을 표현할 수 있음. 
	           블럭태그이기 때문에 자동으로 줄바꿈이 일어난다.
	           h1 (글씨 크기가 가장 큼)~h6(글씨 크기가 가장 작음) 까지 있으며, 
	           제목은 h1, 부제목은 보통 h3을 사용한다.

16. <form></form> = input으로 입력받은 값들을 저장하는 태그
		action 으로 저장받은 값을 어디로 내보낼 것인지를 정할 수 있다.
		ex) <form action="b.html"></form>
		(입력받은 값을 b.html로 넘겨주겠다는 의미)

	* 데이터 전송 방식 *

	method = get은 URL에 쿼리스트림을 붙여서 전송 = url을 통해 정보가 노출됨
	http://localhost:8089/HelloWorld/b.html?id=teacheryo&pw=123456
	
	method = post는 정보를 전송객체의 본문(body)에 넣어서 전송 = 보안적으로 유리
	http://localhost:8089/HelloWorld/b.html (쿼리스트림에 정보가 노출되지 않음)

	post 방식은 더 많은 정보를 가지고 있을 수 있지만(정보량이 많기 때문에) get보다 속도가 느림
	get은 데이터를 넘겨주는 크기가 정해져있지만, post는 무한정

	보안성&데이터 전송량을 생각하면 get/post를 선택할 수 있음
	비교적 중요하지 않고, 데이터 전송량이 많지 않으면 get (ex.설문조사..)
	중요한 내용이거나 개인적인 정보가 포함 될 경우 post를 사용 (ex.회원가입..)


17. 값을 입력 받을 때는 input태그를 사용하는 것이 일반적이다. 
     input으로 받은 값은 반드시 name태그와 하나의 쌍으로 페어링을 해 넘겨줘야 하기 때문에
     직접 값을 입력받는 type의 input태그는 반드시 name태그를 달아준다.
	ex) id나 비밀번호, 이름, 생년월일 등등..
	<input type="password" name="pw"> 
	: 입력받은 비밀번호를 pw라는 태그이름과 함께 페어링하겠다.

18. <input>태그에서의 type

	- password : 비밀번호 입력창에 사용하는 태그 (입력한 문자가 보이지 않게 함)
	- date : 생년월일을 입력받을 때 사용하는 태그 (달력형태의 생년월일 입력 창이 생성됨)
	- tel : 전화번호를 입력받을 때 사용하는 태그 (전화번호 형식의 값만 입력값을 제한함)
	- email : email@mail.com 의 형식을 가진 값만 입력할 수 있도록 제한함
	- submit : 값을 넘겨주는 버튼 역할을 함 ( javascript에서 어디로 넘겨줄 지 정할 수 있음) 
	* - radio : radio는 선택지중의 하나만 선택해 value를 넘겨받겠다는 의미
		
		답이 하나밖에 없는 다지선다 문제라고 생각하면 됨
		최종학력 이라는 문제에 저장될 답 name은 하나이다
		name은 답안지 / value는 보기 (아래중 하나를 고르시오)
	
		<input type="radio" name="school" value="es" id="es">
		<label for="es">초등학교</label><br>
		<input type="radio" name="school" value="ms" id="ms" checked>
		<label for="ms">중학교</label><br>

		 여러가지 값이어도 한 항목에 있기 때문에 name은 동일하게 해줌

	* - checkbox : 다중선택을 가능하게 하는 type값
		      여러가지 값이어도 한 항목에 있기 때문에 name은 동일하게 해줌 
		      체크박스의 경우 다중 선택이 가능함 : 
		      (checked속성을 여러개 넣어줘서 여러 항목이 선택 가능함을 알려줘야 함)

	체크박스나 라디오버튼을 구현할 때는 어느 한 보기문항에 checked 태그를 넣어준다.
	(미리 체크를 해 둬서 이것이 라디오버튼/체크박스 라는 것을 알려주기 위함)

19. 웹사이트에서 입력받는 모든 값은 DB에 String형으로 저장된다.
     parse()를 이용해서 자료형을 변경해 이용하면 됨! 

20. 사이트에 이미지 넣는 법 

	 <img alt="(그림이 출력되지 않을 때 대신 띄울 내용/텍스트)" src="(그림의 주소)">
	  EX) <img alt="4k이미지" src="test.jpeg" width="25%" height="25%">

	( cf. width/height로 크기 조절이 가능하지만 이렇게 사용하진 않음.)

21. 시맨틱태그 : 태그명으로 이 태그가 무슨 기능을 하는지 알 수 있는 태그들.
	ex) <article> / <em> / <mark> / <del> / <ins> / <strong> ...

	* <article> : 기사문임을 나타내는 시맨틱 태그

	* <mark> : 특정 텍스트를 강조하고 싶을 때 (형광펜으로 밑줄 그은 것 처럼 표현됨)

	* <del> : delete 지워야 하는 텍스트일 경우에 사용 (해당 텍스트에 중간선이 그어짐)

	* <ins> : insert 반드시 존재해야하는 텍스트를 강조할 경우에 사용 (해당 텍스트에 밑줄이 그어짐)

	* <sup> : 주석처리하기. 주석이 되는 텍스트가 살짝 위로 올라가게 표현됨
		(ex. 2의 n승을 표현하거나, 책에서 참조 주석이 되는 부분을 표현함)

	* <sub> : 주석처리하기. 주석이 되는 텍스트가 살짝 아래로 내려가게 표현됨
		(ex. 화학식 표현하기 등등)

	* <q> : 인용구를 넣을 때 큰따옴표 대신 q태그를 넣어준다.

	* <blockquote> : 들여쓰기 기능

	* <abbr> : 단축칸/축약칸. 이 단어가 단축어/축약어/약어 임을 나타내주는 태그
		  title속성을 이용해 어떤 이야기를 단축한 것인지 표현해 줄 수 있음

		ex) <abbr title="낄 때 끼고 빠질 때 빠진다.">낄끼빠빠</abbr>를 할 줄 알아야 한다.

	* <i> 와 <em> : <i>는 단순히 이탤릭체를 표현할 때 사용하고
		         <em> emphasis 은 어떠한 텍스트를 강조하기 위하여 기울임체로 표현할 때 사용함
	* <b>와 <strong> : <b>는 단순히 어떠한 텍스트를 굵은 글씨로 표현하고 싶을 때 사용하고
		         <strong>은 어떠한 텍스트를 강조하기 위하여 굵은 글씨로 표현할 때 사용함

	=> css를 활용해서 시맨틱태그의 제반기능들을 구현해 낼 수 있으나
	     css나 일반태그로는 시각장애인용 스크린리더에서 정확히 인식하지 못하는 경우가 종종 있어
	     시맨틱 태그를 이용해 구현할 수 있는 부분은 시맨틱 태그를 이용하는 것이 좋다.

22. <hr> = horizontal tag 웹 페이지에 길게 가로줄을 넣는 기능	

23. 이미지 파일에 하이퍼링크 달기 : img태그를 a태그로 감싼 뒤 <a>태그의 href 속성을 이용한다.
	
	<a href="https://www.nate.com">
	<img alt="4k image" src="test.jpeg" style="width: 50%; height: 50%;"></a>

24. area를 지정해 해당 area를 클릭하면 각각 다른 페이지로 넘어가도록 하이퍼링크 달기 : 
							map 과 area 태그를 이용

	<img alt="4k image" src="test.jpeg" style="width: 200px; height: 200px;" usemap="#myMap">
	img 태그의 usemap 속성을 사용해 id태그를 걸어주고 (#은 id / .은 class를 나타냄)
	
	<map name="myMap">
	map에서 name(=id)을 usemap에서 걸었던 태그 명과 동일하게 해준 뒤 area 태그를 감싸준다

		<area alt="이미지의 왼쪽" shape="rect" coords="0, 0, 100, 100" 
						href="https://www.google.com">
		<area alt="이미지의 오른쪽" shape="rect" coords="101, 101, 200, 200" 
						href="https://www.naver.com">

	area태그는 이미지의 크기만 알면 coords 속성을 이용해 어디든지 지정할 수 있고
	shape를 통해 원형, 직사각형, 다각형등의 형태로 모양을 줄 수도 있다. 
	링크는 href속성으로 걸어준다

	</map>

25. 테이블 만들기 : 깔끔하게 정렬해서 표현할 수 있음

<table border="1"> = border속성 : 테이블의 테두리를 표현해줌

<thead> : 테이블의 컬럼값을 지정
	<tr> : 테이블 행
		<th>아이디</th>
		<th>이름</th>
		<th>직업</th>
		* <th>컬럼명</th> : <th>태그를 쓰면 굵은글씨체와 가운데정렬이 자동으로 됨 -->
	</tr>
</thead>
<tbody> : 실제 데이터가 들어가는 부분 : <tbody></tbody> -->
	<tr>
		<td>m001</td>
		<td>kim</td>
		<td colspan="2">a</td>
		* colspan(세로) : 다른 row가 가진 컬럼의 값이 연달아 같은 값을 가질 때 
			        통합할 수 있는 속성
	</tr>
	<tr>
		<td>m002</td>
		<td>lee</td>
		* colspan에 병합할 row값은 지워준다
	</tr>
	<tr>
		<td>m003</td>
		<td>park</td>
		<td>b</td>
	</tr>
	<tr>
		<td>m004</td>
		<td rowspan="2"></td>
		* rowspan(가로) : 같은 row의 다른 컬럼의 값이 같은 값을 가질 때 통합할 수 있는 속성
		* rowspan에 병합할 컬럼값은 지워준다
	</tr>	
</tbody>
</table>

26. 조건을 선택해 검색할 수 있는 select만들기 
(작성자나 제목, 내용등을 선택해서 조건을 부여해서 검색할 수 있도록 하는 것)

<select name="keywordCri">
- elect 태그를 이용해서 만듦/ 값을 넘겨줘야 하기 때문에 name속성을 주고

	<option value="tc">제목+내용</option>
	<option value="t">제목</option>
	<option value="c">내용</option>
	<option value="w" selected>작성자</option>
	default로 select에 항상 "작성자"를 띄우고 싶으면 selected 속성을 줌

</select>



* <a herf=""></a>로 링크를 로그인페이지나 회원등록페이지로 지정했다고 해서
로그인이 되고 회원 등록이 되는것은 아님 -> 해당 페이지로 이동 해 페이지를 띄워줬을 뿐이다.

브라우저에 에러가 나면 F12 개발자모드를 이용해서 확인할 수 있음


