nextLine(); = 문자열을 입력받음. 띄어쓰기조차도 다 입력으로 인식함.
구분하는 기준 => enter (enter를 만나면 다 입력받았다고 확인하고 출력해냄)

nextInt(); = 에서 값을 입력해서 엔터를 쳐버리면 nextInt는 정수값만 받기 때문에
enter키를 인식하지 않는다.
nextLine(); = 그래서 아래에 있는 nextLine메서드에서 엔터값을 받아서 출력해버림

그래서 nextLine을 입력할 때, 윗쪽에 다른 입력값을 받는 next 메서드가 있으면

System.out.println("a 값을 입력하세요.");
		a = sc.nextInt();
		sc.nextLine();

		System.out.println("msg1 값을 입력하세요.");
		String msg1 = sc.next();
		System.out.println(msg1);
			
		String msg2 = sc.nextLine();



< 추상화 >

- 추상 클래스와 추상 메서드를 의미함
1.

public void me1( ){
	sysout(1);
}

public void me2( ){
	sysout(1);
}

public abstract void me3( );
(중괄호가 없는 추상적인 메서드 = 추상매서드의 형태)

public void me4( ){
	sysout(1);
}

==> 반드시 자식클래스에서 오버라이딩을 해야하는 메서드 : me3();
.
추상 클래스에는 반드시 추상 메서드가 있어야 한다. 

추상메서드를 구현한다? - 자식클래스에서 일반 메서드로 변경해준다는 의미와 비슷하다.
부모클래스의 매서드를 통해서 자식클래스에서 반드시 오버라이딩 해야하는 상황이 있을때
(각각 다른 기능을 구현해야 할 경우에)

추상메서드를 만드는 키워드 abstract


추상클래스 : 추상 매서드를 가지고 있는 클래스는 반드시 추상클래스로 선언해야 한다
	   추상클래스를 왜 사용해야 할까? 부모클래스로 객체를 만들지 못하게 강제시키기 위해 씀
	   부모 클래스가 가지고 있는 메서드를 오버라이딩 하고싶지 않은 경우
	   추상클래스로 선언하기도 한다. (부모클래스가 가진 내용을 변경하지 않고..
	   추상매서드가 없어도 부모클래스라면 추상클래스로 만들어주자


추상클래스 선언방법 : 클래스 헤더에 abstract 키워드를 넣어 줌.
		  ex) public abstract class Weapon



final : 
메서드에 final 키워드가 붙으면? 자식클래스에서 절대 메서드 오버라이딩을 하면 안되는 메서드가 됨
변수에 final키워드를 붙이면 상수가 됨
클래스에 final 키워드를 붙이면 자식클래스를 만들수 없는 클래스가 됨

상수 : 모든 상수명을 대문자로 처리함 / 띄어쓰기가 필요한 경우 _ 로 처리함

<objext class>

주요 3 메서드
1. toString() : sysout(msg.toString());
2. hashCode() : 객체가 어디에 저장이 되어 있는지 알려주는 메서드
3. equals() : 객체 동등성 비교기능을 제공하는 메서드

=> 일반적으로 상황에 맞게 이 3개의 매서드를 오버라이딩 해줌
	 : 객체 비교를 해야하는 상황


<접근제한자> (= 접근제어지시자)

1. public : 프로젝트 어디에서든 접근 가능.

2. protected : 같은 패키지에서만 접근가능. 
	      단, 상속관계가 성립할 때는 패키지가 달라도 접근할 수 있다. 
3. defualt : 같은 패키지에서만 접근 가능.

4. private : 같은 클래스에서만 접근 가능.


변수나 상수에 사용할 수 있는 접근제한자 => public, protected, defualt, private
메서드에 사용할 수 있는 접근제한자 => public, defualt, protected, private
클래스에 사용할 수 있는 접근제한자 => public, defualt 두가지만 가능

