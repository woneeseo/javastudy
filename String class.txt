<String class>
  
  * String class의 객체 생성법

1. 명시적 객체 생성법 : 약속된 방식에 따라 객체를 만드는 방법
명시적으로 객체를 생성하면 객체는 힙메모리 영역에 생성됨.
String msg = new String("hello");

String msg1 = new String("a");
String msg2 = new String("a");
System.out.println(msg1 == msg2);

하면 결과값은 false가 출력된다. 
왜? 힙 메모리에 생성되는 객체는 만들때마다 새로운 메모리를 할당받기 때문에 같은 객체가 아니다


2. 암시적(묵시적) 객체 생성법 : 임의의 방법으로 객체를 만드는 방법 
암시적으로 객체를 생성하면 객체는 리터럴 영역에 생성됨.
==> 리터럴 영역에 생성된 객체는 하나만 생성되기 때문에 

String msg = "hello";

String msg3 = "a";
String msg4 = "a";
System.out.println(msg3 == msg4);

했을 때 결과값으로 true가 출력된다.


===> 데이터가 같을 경우에 같은 객체로 인식하게 하는 방법 : 변수명.equals(비교할 변수명);
===> 참조자료형에서는 ==(동일성비교) 안씀! 
         참조자료형에서 비교연산은 무엇을 통해 이루어질까? equals (동등성비교)

	>동일성 비교 vs 동등성 비교<
	1. 동일성 비교 : 데이터가 같은지 데이터와 그 저장 위치까지 확인해서 비교함
	2. 동등성 비교 : 데이터끼리만 비교해서 같은지 확인함


-  String class는 불변적 성격을 가진다. 
   이러한 성격 때문에 문자열이 계속해서 누적되는 경우에 String class를 사용하면
   성능 저하(데이터 누수)가 발생한다 => 이러한 문제를 해결하기 위해 StringBuffer를 사용한다.

		msg = "";
		//""의 객체가 1개
		msg += "안녕하세요";
		// ""+"안녕하세요" 를 담은 객체가 또하나
		msg += "저는 홍길동입니다.";
		// ""+"안녕하세요"+"저는 홍길동입니다" 를 담은 객체가 또하나
		msg += "저는 조선 세종대왕 시대에 살고있습니다.";
		// ""+"안녕하세요"+"저는 홍길동입니다"+"저는 조선~~"을 담은 객체가 또하나
		// 메서드 영역에 총 4개의 객체가 생긴것 
		// -> 안그래도 좁은 영역에 객체가 새로 또 4개나 생겨서 메모리 누수 발생
		// 나중엔 속도 저하까지 발생하게 됨 => StringBuffer를 사용해 메모리 관리
		
		따라서, 메모리를 효과적으로 관리하기 위해 
	
		StringBuffer sb = new StringBuffer();

		StirngBuffer 클래스로 객체를 만들어주고,
		그 안에 있는 append 메서드를 통해서 데이터를 축적해준다.

		sb.append("안녕하세요");
		sb.append("저는 홍길동입니다.");
		sb.append("저는 조선 세종대왕 시대에 살고있습니다.");
		
		// => 힙메모리에 StringBuffer를 이용해 메모리를 할당받고
		// 거기에 데이터를 축척해나감 -> 메모리 관리가 효과적!
		// 그럼 지금 StringBuffer에 저장된 데이터는
		// 안녕하세요 저는 홍길동입니다. 저는 조선 ~~ 이 다 저장되어있음
		// 근데 StringBuffer는 자주 쓰이는 class가 아니기 때문에
		// 데이터 축적이 완료되면 활용도가 높은 class인 String으로
		// 자료형을 변경해줘야 함.
		*활용도 : 파라미터의 자료형이나 반환형의 자료형으로 이용되는 정도
		
		msg = sb.toString();


< String class의 여러 메서드 >


1. 문자열의 크기를 알고싶을 때 사용하는 메서드? length()

	String str = "hello";
	System.out.println(str.length());

	cf) ArrayList<String> list = new ArrayList(); - 문자열 
	    list.size(); - 그 외
	    =>자바 컬렉션 프레임워크의 리스트 안에 들어있는 요소의 갯수를 파악할 때 씀


2. 문자열의 특정 인덱스에 있는 문자를 알고싶을 때 : charAt()

	System.out.println(msg.charAt(msg.length()-1));

3. 특정 문자 또는 문자열의 시작 문자의 인덱스를 반환하는 메서드 : indexOf()
	* 단, 해당 문자 또는 문자열이 없으면 -1을 반환함! *
	변수내용이 눈에 보이면 상관없지만, 파라미터로 들어오는 문자열은 현재 확인할 수 없다. 
	그럴 때, contains() or indexOf() 를 사용한다
	   ('z'가 포함되어있냐?)  ('z'의 인덱스가 뭐냐?)
		
		boolean result = msg.contains("z");
		"z"가 포함되어있으면 true, 아니면 false이 출력됨

		msg.indexOf('z');
		해당 문자열이 있으면 문자열이 가진 인덱스 번호를 넘겨줌
		문자값이 없으면 -1을 넘겨줌
		
		System.out.println(msg.lastIndexOf('l'));
		문자열에서 검색된 동일 문자 중 가장 마지막 문자의 인덱스는
		astIndexOf(); 를 사용한다. 

4. endsWith() => 접미어가 특정 문자열로 끝나는지 확인할 수 있음
	        boolean형으로 출력되기 때문에 값은 true, false로 출력됨
	        일반적으로 확장자가 무엇인지 확인하고 싶을 때 사용
	        파일이 이미지 파일일 때 선택적으로 썸네일화 해서 표시할 때도 사용
	        (확장자를 .jpg등 이미지 파일 확장자로 찾아내서)	

5. 문자열이 특정 문자열로 시작하는지 알고싶을 때 : startWith() 

6. 문자열끼리 데이터 값이 같은지 여부를 확인하고 싶을 때, equals()
	+ 대소문자를 무시하고 데이터 내용이 같은지 확인하고 싶을 때,  equalsIgnoreCase()

	ex) 웹프로그래밍에서 url주소 입력시 입력값에 따라 사용자가 요구하는 기능을 구분할 때
		


7. 중간에 넣은 공백은 유지하고, 문자열 앞 뒤로 들어간 공백을 제거해주는 기능 : trim();

	String msg = "          he      llo             ";	를
	System.out.println(msg.trim());  해주면
	he      llo 로 출력됨
	
	msg.trim()을 했다고 해서 msg의 값이 변한것은 아니기 때문에
	msg = msg.trim();
	로 tirm한 값을 msg에 다시 대입해줘야만 앞 뒤 공백이 사라진 값을 갖게된다*


8. 문자열에서 특정 문자를 잘라내고 싶을 때? substring()

	"hello world" 에서 "hello "를 잘라내고 "world"만 남게 하고 싶다면? 

		String msg1 = "hello world";
		String a = msg1.substring(msg1.indexOf("w"));
		System.out.println(a);

	콘솔에 "lo wor"를 출력하고 싶을 때,

		int idx = msg1.indexOf('l');
		idx = msg1.indexOf('l',idx+1);
		int idx2 = msg1.indexOf('r');
		System.out.println(msg1.substring(idx, idx2+1));
		
		+1을 해줘야 하는 이유 : l<=범위<r 이기 때문에 r이 포함안됨
				    +1을 해서 인덱스 범위를 늘려줘야 원하는 r이 출력되기 때문에

	substring()도 trim()처럼 원 데이터에는 변화가 없으므로
	잘라낸 결과를 저장하고 싶으면 다시 msg에 대입해줘야 함



9. 특정 기준 문자(delim)을 이용해서 서로 다른 의미를 갖고있는 문자열(=token) 을 분할하기 : split()
	   = regex = delim (|를 제외한 나머지 문자ok)
	   
 	   split은 String클래스의 메소드로 추출한 문자를 배열로 저장


		String msg = "teacheryo#1234#vip#1000#g";
		String[] arr = msg.split("#"); 
		
		문자열을 분할했기 때문에 분할된 문자들이 하나의 배열구조를 갖는다
		반환되는 데이터가 String형의 1차원 배열 => String[] 임

		나눠진 문자열의 각각의 요소를 사용or접근하고 싶으면
		배열 사용법으로 접근하면 됨
	
       cf)   "teacheryo#1234##vip#1000#g#";
	문자열 사이의 ##은 공백으로 인정되지만, 문자열 맨 마지막 #은 delim 으로 인정되지 않음


10. StringTokenizer : split()처럼 문자열을 분할 할 수 있으나, 공백은 인정되지 않음
		StringTokenizer는 메소드가 아니라 java.util에 포함되어 있는 자체 클래스

	StringTokenizer st = new StringTokenizer(msg, "#");
		while(st.hasMoreTokens()) {
			String token = st.nextToken();
			System.out.println(token);

11. 
1. String calss 의 format method를 사용하고 싶을 때 : 
		String.format() (String class의 stack method기 때문)
2. 1 : format 문자값 / 2: 값 
3. %d: 정수 / %s : 문자열 / %f : 실수형/ %t :날짜, 시간/ %c :/ %o : 8진수형 / %x : 16진수형
4. 자릿수 지정 : %n(지정하고 싶은 숫자)d
5. , 를 표현하고 싶을 때 : %,n(자릿수로 지정하고 싶은 숫자)d
6. 좌정렬 : %(,)-nd / 우정렬 : %(,)nd
7. 자릿수 지정 후, 빈 공간을 0으로 채우고 싶을 때 : %(,)0nd
8. 
   String msg11 = "%3.2f%%입니다.";
	          정수는 3자리. 실수는 2자리까지 출력하고(3.2) , 값은 %로 나타내라(%%)

   System.out.println(String.format(msg11, 51.627)); ==> 출력값 : 51.63%입니다.
	(실수의 2자리를 초과한 3번째 자리는 반올림이나 내림이 되어서 51.627이 51.63으로 출력됨


12. toUpperCase() -> 전부 대문자로 출력 
     toLowerCase() -> 전부 소문자로 출력


		 String msg1 = "hello";
		 String msg3 = "HELLO";
		
		
		String s1 = msg1.toUpperCase();
		// 대문자로 출력
		System.out.println(s1);
		String s2 = msg3.toLowerCase();
		// 소문자로 출력
		System.out.println(s2);


		String msg2 = "Hello";  처럼 문자열이 대문자/소문자 섞여있어도
		toUpperCase()면 전부 대문자 / toLowerCase()면 전부 소문자로 출력됨

