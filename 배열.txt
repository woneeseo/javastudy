< 배열 >

// 배열을 왜 쓸까?
1. 반복문을 사용하기 위해서
2. 여러게의 데이터를 반환하기 위해서


 - 여기저기 떨어져 저장되는 데이터를 배열을 사용해 묶어두면 연속적으로 저장이 가능하다
 - 배열은 주로 반복문과 함께 사용된다
ex)
	Q. arrInt가 가지고 있는 모든 요소값 출력하기
	
		int[] arrInt = {1, 4, 6};
		for(int i=0; i<arrInt.length; i++) {
			System.out.println(arrInt[i]);
		}


 - 반복문, 조건식을 만들 때 사용하는 length -> 배열명.length;
		length는 배열의 크기를 확인할 수 있게 해주며,
		배열의 크기만큼 반복해서 데이터를 가져올 수 있게 함 

		배열의 크기가 4라고 해서 4를 입력해버리면 유지 보수가 힘들어지기 때문에
		반드시 배열이 가지고 있는 배열명.length;이라는 속성을 사용할 것

 - 배열은 데이터가 묶인 하나의 방이라고 생각하면 된다.

		int[] arrInt = new int[4];
		            [대괄호 안의 숫자가 배열의 크기를 결정]
			 (데이터를 최대 4개 넣을 수 있는 배열)
		            - 대괄호의 숫자로 n차원 배열이 결정된다
	=> arrInt는 int형의 1차원배열이고 입력할 수 있는 데이터의 수는 4개이다.

- split : 구분자를 기준으로 데이터를 나누어 반환해줌
          split의 반환형은 String[] (String형 1차원 배열) 이다.

	String data = "teacheryo#1#seoul#226#-1";
		String[] arrData = data.split("#");
		System.out.println(arrData.length);

  => 구분자를 "#"으로 지정해주고 length를 출력하면 5가 출력된다.
		

- 배열 만드는 방법 (세가지 다 알아야 함)
	1. 배열생성 첫번째 방법 : 자료형[] 배열명 = new 자료형[length]; 
		int[] arrInt = new int[4];
		-> 알고리즘 이용해서 배열에 값 넣을 때 사용
		-> 자료형의 디폴트 값이 들어있음 

	2. 배열생성 두번째 방법 : 자료형[] 배열명 = {자료형에 맞는 값1, 값2, 값3};
		int[] arrInt = {1, 4, 6};

	3. 배열생성 세번째 방법 : 자료형[] 배열명 = new 자료형[] {자료형에 맞는 값1, 값2, 값3};
		-> 다차원 배열

- 배열 크기를 확인하는 속성 : arr.length

- 배열의 각 요소값에 접근하는 방법

- 배열의 각 요소값 변경

- 배열의 모든 요소값에 접근하는 방법

- 참조자료형의 배열의 경우, 요소값의 특정 자원을 호출하는 방법

- 첫번째 방법(int[] arr = new int[자료의 갯수];)로 배열생성 후 반복문을 이용하여 요소값을 변경하는 방법




< 다차원 배열 >

자료형 [ n차원 배열 수에 맞게 [] ] 배열명 = new 자료형 [n차원 배열에 들어갈 n-1차원의 배열의 수]
					    [n-2차원 배열의 수]; 또는 [n-1차원 배열의 크기];

ex) 	int[][] arr = new int[5][4];
	=> 배열의 크기가 4인 1차원 배열을 5개 가지고 있는 2차원 배열

배열의 요소값을 출력했을 때,

[I@36aa7bc2	처럼 맨 앞이 [ (대괄호)로 시작하는 코드들이 출력된다.

콘솔창에서 이런 코드들이 뜨면 배열이라는것을 알아차려야 한다.



String[][] arrStr = new String[7][3];
String형 자료를 갖는 크기가 3인 1차원 배열을 7개 가지고 있는 2차원 배열

즉, String[] arrStr = new String[3] 인 1차원배열 * 7 개 = arrStr[][]

arrStr[][]에서 요소값을 뽑아내면 arrStr[] 이다 
	=> 왜? arrStr[][]을 구성하고 있는 요소가
	          하나하나의 arrStr[] 이니까 요소값을 뽑아내면 arrStr[] 가 뽑아지는것임

for(int i=0; i<arrStr.length; i++) {

	System.out.println(arrStr[i]);
	 -> arrStr[][]의 요소값을 출력하는 식
	     (2차원 배열 arrStr의 요소인 1차원 배열들의 값을 출력하는 식
	      배열이기 때문에 정확하게 수치로 나오지 않고
	      [Ljava.lang.String;@2401f4c3 처럼 대괄호를 문두에 두는 수치 형식으로 출력됨)


	for(int j=0; j<arrStr[i].length; j++) {
	System.out.println(arrStr[i][j]);
	 -> arrStr[] 이 가지고있는 최종 요소값을 모두 출력하는 식
	     (2차원배열 arrStr의 i번째 인덱스의 1차원배열이 가지고 있는
			   j번째 인덱스의 요소값을 출력하는 식이다)
	}
       }


<가변형 배열>

가변형 배열 : n-1차원 배열의 크기는 반드시 정해줘야 하지만, n-2차원 배열의 크기는 없어도 오류가 나지 않는다
	  
		ex) int[ ][ ] arr = new int[3][ ];
			-> 1차원 배열의 크기를 입력하지 않아도 배열은 만들어진다.

	1차원배열의 요소값을 
		// 인덱스가 0번인 곳 ; 1,2,3,4
		// 인덱스가 1번 : 0,2,4
		// 인덱스가 2번 : 1 3 5 7 9
				각각 배열의 크기가 다르게 입력하고 싶다?

	==> 반복문으로 입력할 수 없음!! (배열의 크기가 정해져 있어야만 정해진 값을 입력할 수 있음)
			
		arr[0] = new int[] {1, 2, 3, 4};
		arr[1] = new int[] {0, 2, 4};
		arr[2] = new int[] {1, 3, 5, 7, 9};

	==> 따라서 이 때는, 배열 생성법 3의 방법으로 값을 직접 입력해주면 된다.
	       요소값 출력하는 법은 일반 배열과 똑같음 
	       (length값을 arr[i].length로 지정해주면 배열의 크기가 달라도
	        각각의 배열의 크기를 알고 있으므로 오류 없이 값을 도출할 수 있음)
