< 배열 >

// 배열을 왜 쓸까?
1. 반복문을 사용하기 위해서
2. 여러게의 데이터를 반환하기 위해서


 - 여기저기 떨어져 저장되는 데이터를 배열을 사용해 묶어두면 연속적으로 저장이 가능하다
 - 배열은 주로 반복문과 함께 사용된다
ex)
	Q. arrInt가 가지고 있는 모든 요소값 출력하기
	
		int[] arrInt = {1, 4, 6};
		for(int i=0; i<arrInt.length; i++) {
			System.out.println(arrInt[i]);
		}


 - 반복문, 조건식을 만들 때 사용하는 length -> 배열명.length;
		length는 배열의 크기를 확인할 수 있게 해주며,
		배열의 크기만큼 반복해서 데이터를 가져올 수 있게 함 

		배열의 크기가 4라고 해서 4를 입력해버리면 유지 보수가 힘들어지기 때문에
		반드시 배열이 가지고 있는 배열명.length;이라는 속성을 사용할 것

 - 배열은 데이터가 묶인 하나의 방이라고 생각하면 된다.

		int[] arrInt = new int[4];
		            [대괄호 안의 숫자가 배열의 크기를 결정]
			 (데이터를 최대 4개 넣을 수 있는 배열)
		            - 대괄호의 숫자로 n차원 배열이 결정된다
	=> arrInt는 int형의 1차원배열이고 입력할 수 있는 데이터의 수는 4개이다.

- split : 구분자를 기준으로 데이터를 나누어 반환해줌
          split의 반환형은 String[] (String형 1차원 배열) 이다.

	String data = "teacheryo#1#seoul#226#-1";
		String[] arrData = data.split("#");
		System.out.println(arrData.length);

  => 구분자를 "#"으로 지정해주고 length를 출력하면 5가 출력된다.
		

- 배열 만드는 방법 (세가지 다 알아야 함)
	1. 배열생성 첫번째 방법 : 자료형[] 배열명 = new 자료형[length]; 
		int[] arrInt = new int[4];
		-> 알고리즘 이용해서 배열에 값 넣을 때 사용
		-> 자료형의 디폴트 값이 들어있음 

	2. 배열생성 두번째 방법 : 자료형[] 배열명 = {자료형에 맞는 값1, 값2, 값3};
		int[] arrInt = {1, 4, 6};

	3. 배열생성 세번째 방법 : 자료형[] 배열명 = new 자료형[] {자료형에 맞는 값1, 값2, 값3};
		-> 다차원 배열

- 배열 크기를 확인하는 속성 : arr.length

- 배열의 각 요소값에 접근하는 방법

- 배열의 각 요소값 변경

- 배열의 모든 요소값에 접근하는 방법

- 참조자료형의 배열의 경우, 요소값의 특정 자원을 호출하는 방법

- 첫번째 방법(int[] arr = new int[자료의 갯수];)로 배열생성 후 반복문을 이용하여 요소값을 변경하는 방법


	