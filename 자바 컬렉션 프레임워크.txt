<자바 컬렉션 프레임워크>

- 상자다
- 상자는 상자인데 무엇을 담을 수 있는 상자인가?
- 상자에 무엇이 담겨있는지를 알려주는 것을 Generic이라고 한다.
  (상자에 내용물의 이름을 적는 것)
- 상자의 내용물에 아무거나 넣으면 Runtime Exception이 발생함
- 특정 자료형만 넣을 수 있게 만들어진 상자
- 활용도가 매우 높음 
- 자바 컬렉션 프레임워크 <내용물의 참조자료형>
  (기본자료형은 들어갈 수 없다. - wrapper class로 사용해야함)


- List Interface

- Set Interface

- Map Interface
(자바 컬렉션 프레임워크는 아니지만 사용방법이 자바 컬렉션 프레임워크와 같다)




< List Interface >


-  ArrayList
: List Interface는 인터페이스이기 때문에 인터페이스로는 객체를 생성할 수 없음
따라서 list 자바 클래스 프레임워크에 있는 자료를 사용하기 위해서는 list를 구현한
Arraylist 클래스를 이용한다.

배열처럼 생긴 list
배열은 처음에 크기를 정해주면 크기가 변하지 않지만,
arraylist는 크기를 변경시키는 것이 가능하다.
		
- 만드는 방법 : 자바컬렉션프레임워크 <내용물의 참조자료형>
  List<Apple> list = new ArrayList<Apple>();

- Apple 클래스의 객체'만' 내용물로 들어갈 수 있음		

	list.add(new Apple());
	list.add("안녕"); => 에러발생
	list에서 add( )는 반환형이 있지만 따로 받아주지 않아도 오류나지 않음

- list.add( )

List<Integer> list = new ArrayList<Integer>();
	
	list.add(new Integer(3));
	list.add(4);
	list.add(5);
	list.add(6);

- wrapper class는 auto boxing - auto unboxing이 되기 때문에
참조자료형처럼 값을 입력해줘도 되고, 그자리에서 바로 값을 입력해도 됨.

cf)

List<Map<String, Object>> list = new ArrayList<Map<String,Object>>();
		
	list.add(new HashMap<String, Object>());
		
- map은 인터페이스라서 map으로는 객체를 만들 수 없음
  map을 구현하고 있는 hashmap클래스를 이용해서 Map에 객체를 생성해줌


- list.get( )

	Apple iphone12 = list.get(0);

       list가 가진 요소값을 출력하는 메서드. 인덱스번호를 이용해서 출력함.


- list.set( )

	list.set(list.size()-1, 1.1);
	System.out.println(list.get(list.size()-1));

	값을 설정하는 메서드. (인덱스번호, 원하는 값) 을 입력하면 됨.


- list.remove( )

	list.remove(new Integer(100));

int 자료형으로 입력된 값을 삭제하고 싶을 때 new Integer(인덱스에 저장된 값) 을 입력해주면 됨
int형 자료값과 인덱스가 정수값으로 충돌하면 인덱스로 인식한다.
인덱스를 이용해 삭제하는방법과 저장된 값을 이용해 삭제하는 방법(object) - 2가지가 있음
		
	System.out.println(list);
		
	list.remove(1);
	list.remove(2);
	System.out.println(list);

list에서는 하나가 삭제되면 삭제된 자리로 자료가 당겨짐
[3, 100, 5, 6] 에서 인덱스 1번을 지우면
list의 배열이 [3, 5, 6] 으로 바뀌면서, 다시 인덱스번호가 부여된다.
100이 삭제되어서 인덱스 1번이 5로 변경되었다.
인덱스 2번을 삭제하면 6이 삭제되며 최종적으로 콘솔에 출력되는 값은 [3, 5] 가 남는다.
		
	list.remove(2);
	list.remove(1);
	System.out.println(list);

list에서는 여러가지 데이터를 삭제하고 싶다면 뒤에서부터 삭제한다.
이러한 특성때문에 수정작업이 빈번한 곳에서는 arraylist를 쓰지 않는다. (linked list를 씀)


- list.clear( )

	리스트에 있는 모든 자료를 삭제할 때 사용. 
	자료를 담았던 상자는 그대로 남아있고 값만 사라짐




< set interface >


- Set :  데이터의 중복을 허락하지 않음. 
          입력순서와 출력순서 사이에 상관관계가 없음 (인덱스가 없음)
          데이터의 중복은 equals( )로 체크. 
          자료를 넣는 주머니(넣는 순서도 뒤죽박죽 꺼내는것도 뒤죽박죽)

- HashSet

	- Set <참조자료형> set = new HashSet<참조자료형>( );

	- 데이터 입력시에는 add( ) 를 씀
	- 데이터를 가져올 때, get( )메서드를 사용할 수 없다 : 
			순서가 뒤죽박죽이기 때문에 인덱스가 없음
	- get( )대신 *iterator( )*로 데이터를 가져옴
	
		*iterator( ) : iterator interface 자료형으로 데이터를 반환해줌
			   (*iterator - 반환자)
			   데이터를 반환해주면, while문을 이용해서 set데이터를 획득
			   이클립스에서 지원하는 기능
		list와 set의 기능의 전반부는 비슷하지만, set에서 완벽히 list의 기능을	
		구현할 수 없기 때문에 itreator 인터페이스가 매개체역할을 함

	- size( )
	- remove(Object obj) : 인덱스가 없기 때문에 직접적인 객체를 넣어야 삭제할 수 있음
			   동등성 비교를 사용해  
	- clear( )
	- Set은 중복을 허용하지 않기 때문에 Map<key word, value> 의 키워드를 set으로 만든다
	
	

< Map - HashMap >


- map으로 객체를 만들 때는 hashmap을 이용한다.

	Map<String, List<Dog>> map = new HashMap<String, List<Dog>>();
	      key -자료형 / value - 값
	 map은 제네릭타입을 2가지를 사용하여 인텍스 (key)를 스스로 만들어 쓸 수 있도록 해줌
	어떤 자료형이든지 인덱스로 만들어 사용할 수 있음(key)

- value 는 중복이 허용되지만, key는 중복을 허용하지 않는다.
- 만일 , key가 중복되어 사용된 경우, 

		map.put(1, "kim");
		map.put(0, "lee");
		map.put(2,"park");
		map.put(1, "kang");
		
		key가 1인 값 kim->kang으로 바뀜

key가 1인 값은 가장 마지막에 입력된 값으로 바뀐다. 

- map에 자료를 입력할 때는 put( )을 사용한다.
  (무언가 값을 2개 입력해야 하는 상황에서는 접두어로 put을 사용한다)

		map.put(1, "kim");
		map.put(0, "lee");

- 참조자료형 뿐만 아니라 list 나 set형식의 자바 컬렉션 프레임워크도 사용할 수 있다. 

- map에서 value를 가져오고 싶으면 key를 이용해서 가져올 수 있다.
		(인덱스 대신 key를 쓰기 때문에)

- get( )
- remove( )
- clear( )



참조자료형의 정렬 -  Comparable interface를 구현하면 된다!

@Override
	public int compareTo(MemberDTO2 o) {
		return this.getId().compareTo(o.getId())*-1;
	}

인터페이스를 생성하면 자동으로 오버라이딩이 생성되는데, return값에 compareTo( )를 이용해
비교결과를 반환하는 식을 만들어 return해준다. 
(마지막줄에 *-1을 해주면 큰수부터 역순으로 출력된다)

		Collections.sort(list);
		System.out.println(list);

메서드에서 출력하기 위해서 Collections.sort(list); 를 입력해주면 원하는 결과값이 도출됨

출력예 : 
[a005 : 청송 : 사과5, a004 : 부산 : 사과4, a003 : 서울 : 사과3, a002 : 대전 : 사과2, a001 : 대구 : 사과1]


기본자료형의 정렬 - 원하는 매서드영역에서 Collections.sort(list);만 해주면 됨

- Collections.sort(list); - 무작위로 출력된 내용을 순서대로 정리할 수 있음. (기본자료형)
	Collections.sort( ); 는 파라미터로 list형의 자료를 받아야 하기 때문에,
	set에서 자료를 순서대로 배치하기 위해서는 list를 만들어줘야한다.

