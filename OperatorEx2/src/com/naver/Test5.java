package com.naver;

public class Test5 {
	
	private int a = 14;
	private int b = 28;
	
	public void h1() {
		int c = b & a ;
		System.out.println(c);
		// 비트연산자 
		// &는 이진법으로 바꾼 두 수를 더한 값을 도출함
	}
	
	public void h2() {
		int c = b | a;
		System.out.println(c);
		// 비트연산자 | 
		// 이진법으로 바꾼 두 수의 같은 자리에 있는 숫자가 둘다 1인 경우에만 1
		// 00001110
		// 00000101
		//===========
		// 00000100 ->의 값을 도출 (4)
		
	}
	
	public void h3() {
		int c = b ^ a;
		System.out.println(c);
		// 비트연산자 ^ (Exclusive Or)
		// 이진법으로 바꾼 두 수의 같은 자리에 있는 숫자가 같은경우는 0, 다른 경우는 1
		// 00001110
		// 00000101
		//===========
		// 00001011 ->의 값을 도출 (11)
		
	}
	
	public void h4() {
		int c = ~a;
		System.out.println(c);
		// 비트연산자 ~
		// 부호 반전 연산자
		// 양수를 음수로 변경할 때는 부호비트를 1로 변경해준 뒤, 1을 더해준다
		// 음수를 양수로 변경할 때는 부호비트를 0으로 변경해준 뒤, 1을 빼준다
		// 00000000 00000000 00000000 00001110 (14)을 음수로 변경하면
		// 10000000 00000000 00000000 00001111 이 된다 => -15
		
	}
	
	public void h5(int n) {
		System.out.println(14 >> n);
		// 2진수로 표현된 숫자의 자리를 왼쪽에서 오른쪽으로 n만큼 이동해주는 것
		// 2의n승으로 나뉘는 효과가 있음
		// 00001110 (14) 를 >>2 만큼 했을 때 -> 00000011 (3)의 값이 도출됨
		
	}
	
	public void h6(int n) {
		
		System.out.println(3 << n);
		// 2진수로 표현된 숫자의 자리를 오른쪽에서 왼쪽으로 n만큼 이동해주는 것
		// 2의 n승으로 곱한 효과가 있음
		// 00001110 (14) 를 <<2 만큼 했을 때 -> 00111000 (64)의 값이 도출됨
		
	}

}
